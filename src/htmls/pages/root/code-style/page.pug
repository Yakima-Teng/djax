extends ../../../templates/post/template.pug

include ../../../components/mixin-head/component.pug
include ../../../components/mixin-header/component.pug

block site-head
  -var title = '代码风格'
  -var desc = ''
  +mixinHead(title, desc)
  link(rel="stylesheet", href="./page.min.css")

block site-header
  +mixinHeader('code-style')

block site-foot
  script(src="./page.min.js")

block site-content
  .container
    .jumbotron
      h1 代码风格
      p
      p Djax会在本地开发过程中使用eslint对你写的js代码风格进行即时检测，一致的代码风格有利于减少一些不必要但是又难以发现的bug，更有利于团队合作。
      p
  
  .container
    .panel.panel-default
      .panel-heading 一点说明
      .panel-body
        p 添加代码风格虽然有可能让从没有如此操作过的你在一开始的时候感觉不太适应，但相信我，等你习惯后你会发现这么做带来的好处是很多的，有些本身难以发现的bug借助代码风格检测可以及时地被发现，比如“a = b;”被写成了“a === b;”，或者你多声明了一个实际上并没有用到的变量，或者你重复声明了一个已经存在的变量，这些问题，可能跑程序的时候是发现不了的，因为它们本身在浏览器里跑的时候是不会报错的，但是借助代码风格检测，你可以很容易避免出现这样低级但是不易查找的bug。下面是一些说明：
      ul.list-group
        li.list-group-item 本套件提供了一套默认的代码风格（使用eslint进行检测），你可以直接使用，也可以根据需要自行修改。
        li.list-group-item 本套件会对src/scripts路径下的js文件进行检测（若该目录下有某些文件或文件夹是你不希望进行风格检测的，请在.eslintignore文件中进行制定，本套件已经指定了src/scripts/libs目录下的js文件，因为这里基本都是一些第三方js文件）;
        li.list-group-item 代码风格配置文件为项目根目录下的.eslintrc.js文件；
        li.list-group-item <a href="https://eslint.org/" target="_blank">eslint的官网</a>

  .container.page-code-style
    ul.lines
      li.line
        span.line-title 分号
        span.line-circle
        .line-desc
          .inner
            p.p 若需要在语句结束处使用分号结束语句，请在rules下配置 'semi': [2, 'always']（默认）
            p.p 若不需在语句结束处使用分号，请在rules下配置 'semi': [0]
      
      li.line
        span.line-title 引号
        span.line-circle
        .line-desc
          .inner
            p.p 若需默认使用单引号，请在rules下配置 'quotes': [2, 'single']（默认）
            p.p 若需默认使用双引号，请在rules下配置 'quotes': [2, 'double']
      
      li.line
        span.line-title 箭头函数的括号
        span.line-circle
        .line-desc
          .inner
            p.p 若允许无括号箭头函数，请在rules下配置 'arrow-parens': [0]（默认）
            p.p 若不允许省略箭头函数的括号，请在rules下配置 'arrow-parens': ['2', 'always']

      li.line
        span.line-title debugger
        span.line-circle
        .line-desc
          .inner
            p.p 若不允许使用debugger，请在rules下配置 'no-debugger': [2]（生产环境默认值）
            p.p 若允许使用debugger，请在rules下配置 'no-debugger': [0]（开发环境默认值）
      
      li.line
        span.line-title 全局变量
        span.line-circle
        .line-desc
          .inner
            p.p 若需要将某个变量设置为允许作为全局变量直接使用，请在globals下配置 '变量名': true/false
            p.p true表示允许对这个变量进行重写，false表示不允许对这个变量进行重写，如无特别需要，建议设为true
      
      li.line
        span.line-title 末尾的逗号
        span.line-circle
        .line-desc
          .inner
            p.p 若禁止在对象、数组等字面量定义中最后一个key:value对/元素后加逗号，请在rules下配置 'comma-dangle': [2, 'never']（默认）
            p.p 若要求在对象、数组定字面量定义中最后一个key:value对/元素后加逗号，请在rules下配置 'comma-dangle': [2, 'always']
